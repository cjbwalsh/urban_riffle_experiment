---
title: "Urban riffle experiment: methods, results"
author: "Christopher J Walsh, J. Angus Webb, et al."
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
bibliography: references.bib
---

```{r}
#| echo: false
#| message: false
#| error: false

source("misc_functions.R")
# load misc data files from OSF
library(osfr); library(dplyr); library(rgeos); library(sf); library(prettymapr)
if(!"data" %in% dir())  dir.create("data")
gpkg_files <- dir(here::here("data"))[grep("gpkg",dir(here::here("data")))]
all_gpkgs <- c("Australia_GDA94_GCS.gpkg","Victoria_GDA94_GCS.gpkg")
gpkg_files <- all_gpkgs[!all_gpkgs %in% gpkg_files]
if (length(gpkg_files) > 0) {
  spatial_files <- osf_retrieve_node("3um4v") %>% osf_ls_files(n_max = 20)
  osf_download(spatial_files[spatial_files$name %in% gpkg_files,], path = "data")
}

dat_file <- 
"~/uomShare/wergStaff/ChrisW/git-data/urban_riffle_experiment/data_for_model.xlsx"
sites <- data.frame(readxl::read_excel(dat_file, sheet = "sites"), 
                    stringsAsFactors = FALSE)
sites <- sf::st_as_sf(sites, coords = c("mgae","mgan"))
samples <- data.frame(readxl::read_excel(dat_file, sheet = "samples"), 
                      stringsAsFactors = FALSE)
biota <- data.frame(readxl::read_excel(dat_file, sheet = "biota"), 
                    stringsAsFactors = FALSE)
taxa <- data.frame(readxl::read_excel(dat_file, sheet = "taxa"), 
                   stringsAsFactors = FALSE)
higher_taxa <- data.frame(readxl::read_excel(dat_file, sheet = "higher_taxa"), 
                   stringsAsFactors = FALSE)

samples$seg <- substr(samples$old_samplecode,nchar(samples$old_samplecode)-1,
                      nchar(samples$old_samplecode)-1)
# The dataset contains samples from the segments upstream and downstream of the 
# riffle (putative or real) in each site for trip 1-4 (out of 6).  Given the 
# small effects in the 'riffle' segments (M), theu U and L segments were not 
# included in the analysis.
samples <- samples[samples$seg == "M",]
# Reduce biota table to match reduced samples table
biota <- biota[biota$smpcode %in% samples$smpcode,]
# Convert long-form biota table into a wide taxon-by-sample table of counts 
# in subsamples
biota_ct <- as.data.frame(ct(biota$smpcode, biota$shortcode, biota$count))
biota_ct <- biota_ct[match(samples$smpcode,row.names(biota_ct)),]
# Create a table of the same dimensions as biota_ct, with the subsample proportion
# for each observation (for coarsepick specimens, subsample ppn = 1)
ss_ct <- biota_ct
for(i in 1:nrow(samples)){
  ss_ct[i,] <- samples$subsample_perc[i]/100
}
for(i in which(biota$coarsepick == 1)){
  ss_ct[row.names(ss_ct) == biota$smpcode[i], biota$shortcode[i]] <- 1
}

# Assemble random predictors (site_no, sample_no, t)
sites <- sites[order(sites$exp_treatment,sites$ai),]
sites$site_no <- 1:nrow(sites)
samples$site_no <- sites$site_no[match(samples$sitecode,sites$sitecode)]
samples$sample <- substr(samples$old_samplecode,1,nchar(samples$old_samplecode)-1)
sample_nos <- data.frame(sample = unique(samples$sample))
sample_nos$sample_no <- 1:nrow(sample_nos)
samples$sample_no <- sample_nos$sample_no[match(samples$sample, sample_nos$sample)]
samples$t <- as.numeric(substr(samples$old_samplecode, 1,1))

# Assemble fixed predictors (a1,a2, ci, ba1ci, ba2ci, i, ba1cii, ba2cii, spring) into a matrix, u
samples$ba <- as.numeric(as.numeric(substr(samples$old_samplecode,1,1)) %in% c(3,4)) 
samples$ba[as.numeric(as.numeric(substr(samples$old_samplecode,1,1))) %in% c(5,6)] <- 2
samples$ba <- factor(samples$ba)
# a1 and a2 are the two after periods treated as categories with b as a reference
samples$ci <- as.numeric(sites$exp_treatment[match(samples$sitecode,sites$sitecode)] == "riffle") 
# 0 = control, 1 = riffle
samples$ai <- sites$ai[match(samples$sitecode, sites$sitecode)]
i_scaled <- scale(log10(samples$ai*100 + 0.1))
samples$i <- as.vector(i_scaled)
samples$spring <- as.integer(substr(samples$old_samplecode,1,1) %in% c(1,3,5))
u <- model.matrix(~ ba + ci + ba:ci + i + ba:ci:i + spring, data = samples)

# Data list for Stan
sdata <- list(n_obs = nrow(biota_ct),
              n_taxa = ncol(biota_ct),
              n_site = nrow(sites),
              n_sample = nrow(sample_nos),
              n_pred = ncol(u),
              n_t = max(samples$t),
              site_no = samples$site_no,
              samp_no = samples$sample_no,
              t = samples$t,
              u = u,
              c = as.matrix(biota_ct),
              s = as.matrix(ss_ct)
)
```

## Introduction

Working methods and results for paper on the urban riffle experiment.

## Methods

### Study area and experimental design

The experiment was a before-after-control-impact (BACI) study with the 'impact' being the construction of rock riffles in degraded urban streams. We selected sites on nine streams draining separate catchments in the eastern suburbs of Melbourne, Victoria, Australia (@fig-experiment_map), and randomly allocated six as 'impact' sites in which riffles were constructed, and three as 'control' sites. All sites were sampled twice in the year before riffle construction, and twice in each of two 'after' periods: *a1* in the first year and *a2*, 5 and 6 years after riffle construction. We inferred effects of the riffles from the interactions between the before-after and control-impact effects: short-term effects using the before-*a1* difference and long-term effects using the before-*a2* difference.

The streams' catchments all included conventionally drained [sensu @burns2012] urban land with effective imperviousness (estimated in 2004, with little urban growth since the commencement of the study) ranging from 4 to 32% (@fig-experiment_map). We further assessed if the effects of riffles differed with degree of urbanization by assessing the interactions between before-after (both *a1* and *a2*), control-impact and effective imperviousness.

Candidate sites were selected from channelised (or at least straight), incised reaches, with little or no riparian vegetation, and no differentiation of riffle or pool, in the sedimentary marine and alluvial deposits of Melbourne's eastern suburbs. Reaches needed to be long enough to encompass a pool-riffle-pool sequence in a restored channel. We surveyed the selected the 9 sites using a theodolite. The thalweg of all reaches showed a wave form. We selected the wave crest as the location for the riffle (sampled for macroinvertebrates before and after riffle construction). We consulted with an engineer who designed and supervised the construction of riffles in these segments on the six 'impact' streams in May 1996. The riffles were 9-22-m long, with approximately 4:1 upstream and 40:1 downstream slopes, and made of angular rocks with mean diameters 15-40 cm. The minimum diameter was larger than the diameter of material at incipient motion for all streams, based on calculations of tractive force from the reach surveys <!--# Perhaps include a table here (supp. material?) of channel dimensions, slopes etc? -->. This riffle design is typical of river management practice in Melbourne's urban streams. The sampled segments were left unchanged in the three control streams, but it is noteworthy that by the mid 2000s, management authorities had constructed similar rock riffles on the sampled segments of two of the control reaches.

```{r}
#| label: fig-experiment_map
#| echo: false
#| fig-width: 5
#| fig-height: 6.5
#| warning: false
#| message: false
#| fig-cap: "Map of experimental sites (6 sites in which riffles were constructed and 3 control sites) and their catchments. The extent of impervious coverage (in 2004, gray basemap), piped sections of streams (dark grey stream lines), and the percentage effective imperviousness of each catchment indicate the range of urban impacts among the sites."

source("https://tools.thewerg.unimelb.edu.au/documents/mwstr/mwstr_functions.R")
source("https://tools.thewerg.unimelb.edu.au/data/mwbugs/bugDatabaseFunctions.R")

#Streams for creating a map sqlQuery is a function I wrote, stored in mwstr_functions.R, loaded above
streams <- sqlQuery("SELECT * FROM streams WHERE sampleable = 1;", "mwstr")
pipes <- sqlQuery("SELECT * FROM streams WHERE type = 'pipe';", "mwstr")
sites$reach <- substr(sites$sitecode, 1, nchar(sites$sitecode) - 1)
cats <- sqlQuery(paste0("SELECT * FROM cats WHERE reach IN ('",
                        paste(sites$reach, collapse = "', '"), "');"), "mwstr")
coast <- sqlQuery("SELECT * FROM coast;", "mwstr")
# impervious coverage raster
ia <- terra::rast("~/uomShare/wergStaff/ChrisW/git-data/mwstr/mwstr_v12_corrections/rasters_v13/r_imp_2004.tif")
# crop to area to be plotted (placing a 10 km buffer around the cats polygons)
ia <- terra::crop(ia, terra::ext(sf::st_buffer(cats,1e4)))
victoria <- sf::st_read("data/Victoria_GDA94_GCS.gpkg", quiet = TRUE)
australia <- sf::st_read("data/Australia_GDA94_GCS.gpkg", quiet = TRUE)
#Colour sites by experimental treatment (see: https://colorbrewer2.org/)
sites$col <- 
  RColorBrewer::brewer.pal(3,"Dark2")[match(sites$exp_treatment == "riffle",0:1)]

layout(matrix(c(1,2,1,3,1,4,1,5),4,2,byrow = TRUE), 
       widths = c(10,2.5), heights = c(8,8,4,4))
par(mar = c(0,0,0,0))
plot(cats$geometry, pch = 21, border = "white")
terra::plot(ia, col = gray(0.5), legend = FALSE, axes = FALSE, add = TRUE)
plot(cats$geometry, border = sites$col[match(cats$reach,sites$reach)], 
     col = scales::alpha(sites$col[match(cats$reach,sites$reach)],0.25),
     lwd = 2, add = TRUE)
plot(streams$geometry, col = "dodgerblue", add = TRUE)
plot(pipes$geometry, col = gray(0.25), add = TRUE)
x <- rgeos::polygonsLabel(as_Spatial(cats), 
                     paste0(round(100*sites$ai[match(cats$site,sites$site)]),"%"),
                     font = 2)
plot(coast$geometry, lwd = 2, add = TRUE)
plot(sites$geom, pch = 21, bg = sites$col, add = TRUE) # so that the sites are on top
rng <- par('usr')
prettymapr::addscalebar(pos = "bottomright", label.cex = 1, )
box()
rngPoly <- st_sfc(st_polygon(list(rbind(rng[c(1,3)], rng[c(1,4)], rng[c(2,4)], 
                                 rng[c(2,3)],rng[c(1,3)]))))
rngPoly <- st_sf(a = 1, geom = rngPoly)
# Legends
plot.new()
legend("center", pch = c(21,21,15), pt.cex = c(1,1,2), 
       pt.bg = c(RColorBrewer::brewer.pal(3,"Dark2"),NA),
       col = c("black","black",gray(0.5)),
       legend = c("Control","Riffle","Impervious"),bty = "n")
box()
plot.new()
legend("center", lty = 1, col = c("dodgerblue",gray(0.25)),
       legend = c("Stream","Piped stream"),bty = "n")
box()
# Location maps
st_crs(rngPoly) <- 28355
rngPoly <- rngPoly %>% st_transform(4283)
par(mai = c(0.028,0.028,0.028,0.028) * 0)
plot(australia$geom)
plot(victoria$geom, col = "white", add = TRUE)
polygon(c(142.9651,146.5656,146.5656,142.9651),c(-39.1122,-39.1122,-36.4374,-36.4374), col = scales::alpha(gray(0.5),0.5))
plot(rngPoly$geom, col = "black", add = TRUE)
title(main = "Australia", adj = 0, 
      font.main = 1, line = -1, cex.main = 1)
box(lwd = 1)
bounds <- st_sfc(st_point(c(143.5,-36.5)), st_point(c(146.5,-39.1)),crs=4283)
plot(bounds, col = "white")
plot(victoria$geom, add = TRUE)
rng_vic <- par("usr")
plot(rngPoly$geom, col = scales::alpha(gray(0.5),0.5), add = TRUE)
title(main = "Central Victoria ", 
      adj = 1, font.main = 1, line = -1, cex.main = 1)
box(lwd = 1)
```

### Riffle design and construction

### Macroinvertebrate assemblage sampling and identification

Data were collected at the nine sites on six occasions; twice prior to the installation of riffles (Nov 1995, Feb 1996), and four times after riffle installation (Nov 1996, Feb 1997, Dec 1999, Feb 2001). On each occasion, we collected replicate macroinvertebrate sample units (4 on occasions 1-4, 3 in Dec 1999 and Feb 2001) at each site using a 0.04 m^2^ suction sampler [@boulton1985]. To take a sample, one operator disturbed sediments in the sample quadrat with a spatula and scrubbed larger surfaces with a small brush while the second operator pumped out the sampler contents into a 250 $\mu$m net. All organic matter within the sampler was kept.

We processed sample units separately, and considered the set of replicates collected from each site on each occasion a sample. Each sample unit was preserved in 1% formaldehyde and transferred to 70% ethanol after 24 h. In the laboratory, many sample-units were subsampled to reduce processing time. Initially, some samples were fully processed to develop the subsampling protocol reported by [@walsh1997], which was followed in processing all subsequent samples. The protocol requires a 0.1 subsample to be sorted, followed, if necessary, by additional subsamples until 300 specimens have been collected. Trends in subsample proportions over the 6 sampling periods differed among the study sites, potentially leading to differing biases in abundance estimates over time and among sites [@buonaccorsi_2010; @kery_schaub_2011]. We thus accounted for subsampling error in our statistical models (see below). Macroinvertebrates were identified to lowest practicable taxonomic level and counted.

### Environmental variable determination

After each sample unit was collected, the sampler was removed and water depth and velocity were measured at the four corners of the sampled area and the centre point. Velocity was measured using a .... <!--# dig up methods document --> . From these five measurements, we calculated the mean and variance of velocity for each sample unit.

In the laboratory, after macroinvertebrates were collected from the sample, we separated the sample material into fine and coarse particulate organic matter (FPOM, and CPOM, respectively), wood, macrophyte leaves and algae. Each of these elements was dried at 60°C for 24 h, weighed, and ashed at 500°C for 4 h, to determine ash-free dry weight. <!--# Need to dig up lab methods to make sure this is correct -->

### Statistical models

We modeled the total count of taxon *j* in each sample unit, *i*, ($Y_{i,j}$) as a negative binomial distribution (given the highly skewed distributions of taxon counts) and the count of taxon *j*, ($c_{i,j}$), in a subsample of sample unit *i* as a binomial distribution given the subsample proportion $s_{i,j}$ and $Y_{i,j}$. Thus:

$$
\begin{align}
&Y_{i,j} \sim \textrm{Neg. Binomial}(\mu_{i,j}, \phi_{j}) \\
\\
&c_{i,j} \sim \textrm{Binomial}(s_{i,j}, Y_{i,j})
\end{align}
$$ {#eq-taxon_count_likelihood}

where $\mu_{i,j}$ = the mean total count of taxon *j* in sample unit *i*, and $\phi_j$ = the dispersion parameter of the negative binomial distribution for taxon *j*.

We modelled $\mu_{i,j}$ as a linear model of 6 fixed predictors and four 4 random predictors, thus:

$$
\begin{align}
\mu_{(i,j)} \sim \ &\alpha_j + \beta\_ba_{j} * BA_i + \beta\_ci_{j} * CI_i  + \beta\_baci_{j} * BA_i * CI_i + \beta\_i_j * I_i \ +\\
& \beta\_bacii_{j} * BA_i * CI_i * I_i + \beta\_i_j * I_i + \beta\_{s}_j * S_i \ +\\
& \theta_{1(i,si)} + \theta_{2(i,sa)} + \theta_{3(i,t)}+ \epsilon_{(i,j)}
\end{align}
$$ {#eq-exp_linear_model}

where $\alpha_j$ is the model intercept for taxon *j*, $\beta\_ba_{j}$ is the before-after effect (*BA*, a categorical variable with values before, first year after, *a1*, and fifth/sixth year after, *a2* ), $\beta\_ci_{j}$ is the control-impact effect (*CI*), $\beta\_baci_{j}$ is the interaction of the *BA* and *CI* effects, and $\beta\_bacii_{j}$ is the interaction of the *BA*, *CI* and *I* effects. $\beta\_i_{j}$ is the the effect of catchment effective imperviousness (*I*), $\beta\_s_{j}$ is the the effect of season (*S*: autumn = 0, spring = 1). The $\theta$ and $\epsilon$ parameters model the error structure of the dataset. $\theta_{1(i,si)}$ models variation among samples within each site, indexed by *si*. $\theta_{2(i,sa)}$ models variation among the four sample units within each sample, indexed by *sa*. $\theta_{3(i,t)}$ models variation among samples within each sampling campaign, indexed by *t*. $\epsilon_{(i,j)}$ models random variation among all sample units.

All $\beta$ parameters were formulated as random effects drawn from community-level hyper-distributions with the mean parameters specified as diffuse normal distributions (mean 0, standard deviation 5) and the parameters for each species drawn from a multivariate normal distribution with a variance-covariance matrix that describes the residual associations among species. The random effect parameters for site ($\theta_{si}$), sample ($\theta_{sa}$) and sampling occasion ($\theta_{t}$) had weakly informative normal priors with mean 0 and sd 2, as did the parameter modelling error among sample units ($\epsilon$), and the dispersion parameter ($\phi$) of the negative binomial distribution for each taxon. We derived the model using the Markov chain Monte Carlo sampler of Stan [@carpenter_etal_2017].

The model satisfied tests for convergence, effective sample size, and Bayesian Fraction of Missing Information (@stan_dev_team_2022: see Appendix S1 for more details).

<!--# Need to edit the following taken from White and Walsh 2020.  -->

We quantified model accuracy by correlation coefficients (R) and by mean errors between predicted and observed abundances (log-mean abundances of each taxon in each combination of site and surface complexity). To assess potential bias in model predictions, we calculated the slope of a regression of predicted abundance as a function of observed abundance. We also applied the same tests to the model's estimates of combined abundance and richness of all taxa and of EPT taxa.

The model predicted abundances of all taxa at each site well (mean R for all taxa 0.87, range 0.55--1.00), without bias for the 51 taxa occurring in \>5 samples (mean slope 0.98, range 0.5--1.8). Abundances of the rare 42 taxa (oc- curring in ≤5 samples) tended to be underestimated (mean slope 0.52). However, this underestimation for rare taxa did not contribute strongly to model predictions of assemblage-level metrics (e.g., for total abundance R 0.96, slope 0.92, whether rare taxa were included or not). In summary, the multi-taxon model concords well with the data, affording confidence in the model's assessment of our experimental effects on the macroinvertebrate assemblage. See Appendix S2 for more detail.

<!--# There are full sets of L and U samples for trips 1-4. Could be worth exploring effects over the three sections, but for now, let's just stick with M samples.  -->

## Results

coefficient plot

```{r}
#| echo: false
#| warning: false
#| message: false

mod_draws <- get(load("~/uomShare/wergStaff/ChrisW/git-data/urban_riffle_experiment/model_fits/fit_riffle_baci_draws.rda"))
params <- c("b_ba1", "b_ba2", "b_ci","b_i","b_spring","b_ba1ci","b_ba2ci","b_ba0cii","b_ba1cii", "b_ba2cii")
df_empty <- data.frame(shortcode = NA, mean = NA, lo95 = NA, lo90 = NA, median = NA, hi90 = NA, hi95 = NA)[0,]
param_summs <- list()
for(i in 1:length(params)){
  drawsi <- mod_draws[substr(names(mod_draws),1,ifelse(i < 9, 7, 8)) == paste0("gamma[", i + 1) & 
                          grepl("gamma", names(mod_draws))]
  qlsi <- as.data.frame(t(apply(drawsi,2, FUN = quantile, 
                                probs = c(0.025,0.05,0.125,0.5,0.875,0.95,0.975))))
  names(qlsi) = c("lo95","lo90","lo75","median","hi75","hi90","hi95")
  meani <- apply(drawsi,2, FUN = mean)
  param_summs[[i]] <- data.frame(shortcode = names(biota_ct), 
                                 mean = meani,
                                 qlsi)
}
names(param_summs) <- params
  
ba1ci_pos_taxa <- param_summs$b_ba1ci$shortcode[param_summs$b_ba1ci$lo90 > 0] #0
ba1ci_neg_taxa <- param_summs$b_ba1ci$shortcode[param_summs$b_ba1ci$hi90 < 0] #0
ba2ci_pos_taxa <- param_summs$b_ba2ci$shortcode[param_summs$b_ba2ci$lo90 > 0] #0
ba2ci_neg_taxa <- param_summs$b_ba2ci$shortcode[param_summs$b_ba2ci$hi90 < 0] #0
ba0cii_pos_taxa <- param_summs$b_ba0cii$shortcode[param_summs$b_ba0cii$lo90 > 0] #19
ba0cii_neg_taxa <- param_summs$b_ba0cii$shortcode[param_summs$b_ba0cii$hi90 < 0] #7
ba1cii_pos_taxa <- param_summs$b_ba1cii$shortcode[param_summs$b_ba1cii$lo90 > 0] #19
ba1cii_neg_taxa <- param_summs$b_ba1cii$shortcode[param_summs$b_ba1cii$hi90 < 0] #0
ba2cii_pos_taxa <- param_summs$b_ba2cii$shortcode[param_summs$b_ba2cii$lo90 > 0] #4
ba2cii_neg_taxa <- param_summs$b_ba2cii$shortcode[param_summs$b_ba2cii$hi90 < 0] #0
taxa_to_plot <- unique(c(ba0cii_pos_taxa,ba0cii_neg_taxa,
                         ba1ci_pos_taxa,ba1ci_neg_taxa,ba1cii_pos_taxa,ba1cii_neg_taxa,
                         ba2ci_pos_taxa,ba2ci_neg_taxa,ba2cii_pos_taxa,ba2cii_neg_taxa,
                         param_summs$b_ba$shortcode[param_summs$b_ba$lo90 > 0],
                         param_summs$b_ba$shortcode[param_summs$b_ba$hi90 < 0],
                         param_summs$b_ci$shortcode[param_summs$b_ci$lo90 > 0],
                         param_summs$b_ci$shortcode[param_summs$b_ci$hi90 < 0],
                         param_summs$b_i$shortcode[param_summs$b_i$lo90 > 0],
                         param_summs$b_i$shortcode[param_summs$b_i$hi90 < 0],
                         param_summs$b_spring$shortcode[param_summs$b_spring$lo90 > 0],
                         param_summs$b_spring$shortcode[param_summs$b_spring$hi90 < 0]))
higher_taxa_in_plot <- higher_taxa[higher_taxa$higher_taxon %in% 
                                     unique(taxa$higher_taxon[taxa$taxoncode %in% taxa_to_plot]),]

# R results for inclusion in figure caption:
ht_string <- paste(paste0(higher_taxa_in_plot$taxon, " (", higher_taxa_in_plot$higher_taxon, ")"), collapse = "; ")
# Annelida (A); Pelecypoda (B); Coleoptera (C); Diptera (D); Ephemeroptera (E); Turbellaria (F); Gastropoda (G); Lepidoptera (L); Acarina (M); Odonata (O); Plecoptera (P); Trichoptera (T); Crustacea (Z); Cnidaria (I); Nematoda (J)
ntoplot <- length(taxa_to_plot) #59
```

```{r}
#| label: fig-coeff_plot
#| echo: false
#| warning: false
#| message: false
#| fig-width: 7
#| fig-height: 9
#| fig-cap: "Coefficients for the six fixed effects (details of symbols to be finalized ) on each of the 59 taxa with at least one non-zero effect at the 90% level.  For each coefficient, 95th, 90th, and 50th percentiles are indicated by increasingly thick bars. Coefficients with >90% less than zero are red, and >90% greater than zero blue. Taxa are ordered by mean of b_I. Taxonomic affiliations are indicated parenthetically: Annelida (A); Pelecypoda (B); Coleoptera (C); Diptera (D); Ephemeroptera (E); Turbellaria (F); Gastropoda (G); Lepidoptera (L); Acarina (M); Odonata (O); Plecoptera (P); Trichoptera (T); Crustacea (Z); Cnidaria (I); Nematoda (J)."

lo <- layout(matrix(c(1:6,0,rep(7,6)),2,6,byrow = TRUE),widths = c(25,rep(10,5)),heights = c(60,2))
taxa$labs <- paste0(taxa$taxon," (", taxa$higher_taxon,")")
taxa_to_plot_df <- taxa[taxa$taxoncode %in% taxa_to_plot,]
taxa_in_order <- param_summs$b_i$shortcode[order(param_summs$b_i$mean, decreasing = FALSE)]
taxa_in_order <- taxa_in_order[taxa_in_order %in% taxa_to_plot]
taxa_to_plot_df <- taxa_to_plot_df[match(taxa_in_order, taxa_to_plot_df$taxoncode),]
miny <- 1; maxy <- length(taxa_to_plot)

param_order <- match(c("b_i","b_ba0cii","b_ba1cii","b_ba2cii","b_ba1ci","b_ba2ci"),names(param_summs))
for(p in param_order){
  summp <- param_summs[[p]]
  summp <- summp[match(taxa_in_order,summp$shortcode),]
par(mar = c(2,ifelse(p == param_order[1], 13, 1),1,0))
  plot(c(min(summp$lo95),max(summp$hi95)),c(miny+1,maxy-1),
       type = 'n', axes = FALSE, xlab = "",ylab = "")
for(i in miny:maxy){
  lines(c(summp$lo95[i],summp$hi95[i]),rep(miny+maxy-0.5-i,2),lend = 2,
        col = ifelse(summp$hi90[i] < 0,"red",ifelse(summp$lo90[i] > 0, "blue","grey")))
  lines(c(summp$lo90[i],summp$hi90[i]),rep(miny+maxy-0.5-i,2), lwd = 2,lend = 2,
        col = ifelse(summp$hi90[i] < 0,"red",ifelse(summp$lo90[i] > 0, "blue","grey")))
  lines(c(summp$lo75[i],summp$hi75[i]),rep(miny+maxy-0.5-i,2), lwd = 4,lend = 2,
        col = ifelse(summp$hi90[i] < 0,"red",ifelse(summp$lo90[i] > 0, "blue","grey")))
  points(summp$mean[i],miny+maxy-0.5-i,pch = 21, 
        bg = ifelse(summp$hi90[i] < 0,"red",ifelse(summp$lo90[i] > 0, "blue","grey")))
}
axis(1)
if(p ==param_order[1])
axis(2,at = (miny:maxy) - 0.5,
     labels = rev(taxa_to_plot_df$labs), cex.axis = 0.9, las = 1)
abline(v = 0, lty = 3)
title(main = names(param_summs[p]))
  }
par(mar = c(0,0,0,0))
plot.new()
title(xlab = "Coefficient", line=-1, cex.lab = 1.25)
```

```{r}
#| label: fig-cfplots_bacii_pos
#| echo: false
#| warning: false
#| message: false
#| fig-width: 7
#| fig-height: 6
#| fig-cap: "Trends in abundance of the 12 taxa for which the interaction between the before-after, control-impact and effective imperviousness effects were negative with 90% confidence. The four lines in each plot connect mean (± 95% confidence intervals) metric values  before and at two times after construction of the experimental riffles for control sites (Ctl) and impact (i.e. site in which riffles were placed, Imp) with low and high effective imperviousness (EI)."

predx_cf <- expand.grid(intercept = 1, ba = factor(c(0,1,2)), ci = c(0,1), 
                        i = seq(min(u[,5]),max(u[,5]),length=10), spring = 0)
predx_cf <- data.frame(model.matrix(~ ba + ci + ba:ci + i + ba:ci:i + spring, 
                                    data = predx_cf))
predx_cf$ai <- 10^(predx_cf$i * attr(i_scaled, 'scaled:scale') + 
                attr(i_scaled, 'scaled:center')) - 0.1
load("~/uomShare/wergStaff/ChrisW/git-data/urban_riffle_experiment/model_fits/fit_riffle_baci_predy_cf_draws.rda")
# cols <- ggsci::pal_jco(palette = c("default"), alpha = 1)(4)
# spell them out so that they are displayed in Rstudio
cols <- c("#0073C2FF", "#EFC000FF", "#868686FF", "#CD534CFF")
# order bacii_pos_taxa in same order as they appear in fig-coeff_plot
ba1cii_pos_taxa <- ba1cii_pos_taxa[order(param_summs$b_i$mean[match(ba1cii_pos_taxa,
                                                                  param_summs$b_i$shortcode)])]
lo <- layout(matrix(c(13,1:4,13,5:8,13,9:12,0,rep(14,4)),4,5,byrow = TRUE),
       widths = c(1,12,10,10,10),heights = c(10,10,12,1))
for(i in 1:12){  #Just first 12 out of 19 to start with
 par(mar = c(ifelse(i %in% 9:12, 4,1), ifelse(i %in% c(1,5,9),5,1),1,1))
predy_cf_i <- predy_cf[[ba1cii_pos_taxa[i]]]
mean_cf_i <- apply(predy_cf_i,2,FUN = mean)
cls_cf_i <- apply(predy_cf_i,2,FUN = quantile, probs = c(0.025,0.975))
cfi <- data.frame(predx_cf, pred = mean_cf_i, lo = cls_cf_i[1,],hi = cls_cf_i[2,])

combos <- list(control_lowi = which(cfi$ci == 0 & cfi$i == min(cfi$i)),
               control_hii = which(cfi$ci == 0 & cfi$i == max(cfi$i)),
               impact_lowi = which(cfi$ci == 1 & cfi$i == min(cfi$i)),
               impact_hii = which(cfi$ci == 1 & cfi$i == max(cfi$i)))
x_adjs <- c(-0.03,-0.01,0.01,0.03)

with(cfi[combos$control_lowi,], 
     plot((0:2) + x_adjs[1], pred, type = 'b',
          col = cols[1], pch = 16, axes = FALSE,ylim = c(min(cfi$lo),max(cfi$hi)), # ylim = c(-14,5), #
          xlab = "", ylab = ""))
with(cfi[combos[[2]],], lines((0:2) + x_adjs[2], pred,
                              col = cols[2], pch = 16, type = 'b'))
with(cfi[combos[[3]],], lines((0:2) + x_adjs[3], pred,
                              col = cols[3], pch = 16, type = 'b'))
with(cfi[combos[[4]],], lines((0:2) + x_adjs[4], pred,
                              col = cols[4], pch = 16, type = 'b'))
for(k in 1:3){
  for(j in 1:4){
    cfij <- cfi[combos[[j]],]
    lines(rep(k-1,2) + x_adjs[j], c(cfij$lo[k],cfij$hi[k]), col = cols[j])
  }
}
if(i %in% 9:12){
            xlabs <- c("Before","2 y after","5 y after")
                }else{ 
            xlabs <- rep(" ",3)
               }
axis(1, at = 0:2, labels = xlabs)
if(i %in% c(1,5,9)){
            ylabs <- c("0.0001",0.001,0.01,0.1,1,10,100,1000)
                }else{ 
            ylabs <- rep(" ",8)
               }
axis(2, las = 1, at = log(c(0.0001,0.001,0.01,0.1,1,10,100,1000)), 
     labels = ylabs) 
box(bty = "l")
if(taxa$italic[taxa$taxoncode == ba1cii_pos_taxa[i]] == 1){
title(main = bquote(paste(.(LETTERS[i]), # taxa$taxoncode[taxa$taxoncode == ba1cii_taxa[i]],
             ". ", italic(.(taxa$taxon[taxa$taxoncode == ba1cii_pos_taxa[i]])))), 
      adj = 0, cex.main = 1)
}else{
 title(main = bquote(paste(.(LETTERS[i]), # taxa$taxoncode[taxa$taxoncode == ba1cii_taxa[i]],
             ". ", .(taxa$taxon[taxa$taxoncode == ba1cii_pos_taxa[i]]))), 
      adj = 0, cex.main = 1)

  }
# if(i == 1)
# legend("topright", pch = 16, col = cols, 
#         legend = c("Ctl, low EI", "Ctl high EI","Imp, low EI", "Imp high EI"),
#         cex = 0.75)
 }
par(mar = c(0,0,0,0))
plot.new()
title(ylab = "Abundance per sample unit", line = -1.5, cex = 1.25)
plot.new()
title(xlab = "Occasion", line = -1.5, cex = 1.25)
par(mar = c(4,4,1,1))

```

```{r}
#| label: fig-cfplots_bacii_pos_2
#| echo: false
#| warning: false
#| message: false
#| fig-width: 7
#| fig-height: 6
#| fig-cap: "Trends in abundance of the 12 taxa for which the interaction between the before-after, control-impact and effective imperviousness effects were negative with 90% confidence. The four lines in each plot connect mean (± 95% confidence intervals) metric values  before and at two times after construction of the experimental riffles for control sites (Ctl) and impact (i.e. site in which riffles were placed, Imp) with low and high effective imperviousness (EI)."

ba0cii_neg_taxa <- ba0cii_neg_taxa[order(param_summs$b_i$mean[match(ba0cii_neg_taxa,
                                                                  param_summs$b_i$shortcode)])]
plot2_taxa <- c(ba1cii_pos_taxa[15:19], ba0cii_neg_taxa)
lo <- layout(matrix(c(13,1:4,13,5:8,13,9:12,0,rep(14,4)),4,5,byrow = TRUE),
       widths = c(1,12,10,10,10),heights = c(10,10,12,1))
for(i in 1:12){  #Just first 12 out of 19 to start with
 par(mar = c(ifelse(i %in% 9:12, 4,1), ifelse(i %in% c(1,5,9),5,1),1,1))
predy_cf_i <- predy_cf[[plot2_taxa[i]]]
mean_cf_i <- apply(predy_cf_i,2,FUN = mean)
cls_cf_i <- apply(predy_cf_i,2,FUN = quantile, probs = c(0.025,0.975))
cfi <- data.frame(predx_cf, pred = mean_cf_i, lo = cls_cf_i[1,],hi = cls_cf_i[2,])

combos <- list(control_lowi = which(cfi$ci == 0 & cfi$i == min(cfi$i)),
               control_hii = which(cfi$ci == 0 & cfi$i == max(cfi$i)),
               impact_lowi = which(cfi$ci == 1 & cfi$i == min(cfi$i)),
               impact_hii = which(cfi$ci == 1 & cfi$i == max(cfi$i)))
x_adjs <- c(-0.03,-0.01,0.01,0.03)

with(cfi[combos$control_lowi,], 
     plot((0:2) + x_adjs[1], pred, type = 'b',
          col = cols[1], pch = 16, axes = FALSE,ylim = c(min(cfi$lo),max(cfi$hi)), # ylim = c(-14,5), #
          xlab = "", ylab = ""))
with(cfi[combos[[2]],], lines((0:2) + x_adjs[2], pred,
                              col = cols[2], pch = 16, type = 'b'))
with(cfi[combos[[3]],], lines((0:2) + x_adjs[3], pred,
                              col = cols[3], pch = 16, type = 'b'))
with(cfi[combos[[4]],], lines((0:2) + x_adjs[4], pred,
                              col = cols[4], pch = 16, type = 'b'))
for(k in 1:3){
  for(j in 1:4){
    cfij <- cfi[combos[[j]],]
    lines(rep(k-1,2) + x_adjs[j], c(cfij$lo[k],cfij$hi[k]), col = cols[j])
  }
}
if(i %in% 9:12){
            xlabs <- c("Before","2 y after","5 y after")
                }else{ 
            xlabs <- rep(" ",3)
               }
axis(1, at = 0:2, labels = xlabs)
if(i %in% c(1,5,9)){
            ylabs <- c("0.0001",0.001,0.01,0.1,1,10,100,1000)
                }else{ 
            ylabs <- rep(" ",8)
               }
axis(2, las = 1, at = log(c(0.0001,0.001,0.01,0.1,1,10,100,1000)), 
     labels = ylabs) 
box(bty = "l")
if(taxa$italic[taxa$taxoncode == plot2_taxa[i]] == 1){
title(main = bquote(paste(.(LETTERS[i]), # taxa$taxoncode[taxa$taxoncode == ba1cii_taxa[i]],
             ". ", italic(.(taxa$taxon[taxa$taxoncode == plot2_taxa[i]])))), 
      adj = 0, cex.main = 1)
}else{
 title(main = bquote(paste(.(LETTERS[i]), # taxa$taxoncode[taxa$taxoncode == ba1cii_taxa[i]],
             ". ", .(taxa$taxon[taxa$taxoncode == plot2_taxa[i]]))), 
      adj = 0, cex.main = 1)

  }
# if(i == 1)
# legend("topright", pch = 16, col = cols, 
#         legend = c("Ctl, low EI", "Ctl high EI","Imp, low EI", "Imp high EI"),
#         cex = 0.75)
 }
par(mar = c(0,0,0,0))
plot.new()
title(ylab = "Abundance per sample unit", line = -1.5, cex = 1.25)
plot.new()
title(xlab = "Occasion", line = -1.5, cex = 1.25)
par(mar = c(4,4,1,1))

```

```{r}
#| label: fig-assemb_data
#| echo: false
#| warning: false
#| message: false
#| fig-width: 7
#| fig-height: 4
#| fig-cap: "Trends in assemblage metrics (A. total richness, B. evenness, C. EPT richness D. SIGNAL core in a sample of 4 sample units) before and at two times after construction of the experimental riffles.  The four lines in each plot connect mean (± 95% confidence intervals) metric values over the three times for control sites (Ctl) and impact (i.e. site in which riffles were placed, Imp) with low and high effective imperviousness (EI)"

load("small_data/assemb_stats.rda")
ylabs = c("Total richness", "Evenness","EPT richness", "DO richness",
          "SIGNAL score", "log(total abundance)", "log(EPT abundance)","log(DO abundance)")

par(mar = c(2,4,1,1))
par(mfrow = c(2,4))
for(i in 1:length(assemb_stats)){
  ylabi <- ylabs[i]
  if(i <= 5) {
    predi <- assemb_stats[[i]]
  }else{
      predi <- log(assemb_stats[[i]])
      }
cfi <- data.frame(predx_cf, 
                  pred = predi[,1], 
                  lo= predi[,2],
                  hi= predi[,3])
with(cfi[combos$control_lowi,], 
     plot((0:2) + x_adjs[1], pred, ylim = c(min(cfi$lo),max(cfi$hi)), 
          type = 'b', col = cols[1], pch = 16, axes = FALSE, 
          xlab = "", ylab = ylabi))
with(cfi[combos[[2]],], lines((0:2)+ x_adjs[2], pred,
                              col = cols[2], pch = 16, type = 'b'))
with(cfi[combos[[3]],], lines((0:2) + x_adjs[3], pred,
                              col = cols[3], pch = 16, type = 'b'))
with(cfi[combos[[4]],], lines((0:2) + x_adjs[4], pred,
                              col = cols[4], pch = 16, type = 'b'))
for(k in 1:3){
  for(j in 1:4){
    cfij <- cfi[combos[[j]],]
    lines(rep(k-1,2) + x_adjs[j], c(cfij$lo[k],cfij$hi[k]), col = cols[j])
  }
}
if(i > 2){
axis(1, at = 0:2, labels = c("Before","2 y after","5 y after"))
}else{
 axis(1, at = 0:2, labels = c("","",""))
  }
axis(2, las = 1); 
box(bty = "l")
title(main = paste0(LETTERS[i],"."), adj = 0)
# if(i == 2){
#   legend("topleft", pch = 16, col = cols, 
#        legend = c("Ctl, low EI", "Ctl high EI","Imp, low EI", "Imp high EI"),
#        cex = 0.9)
}

```
